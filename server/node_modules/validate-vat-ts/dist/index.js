"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountryCodes = exports.VAT_TEST_SERVICE_URL = exports.VAT_SERVICE_URL = exports.ViesClientError = exports.ViesServerError = void 0;
var fetch = require("isomorphic-fetch");
var ViesServerError = /** @class */ (function (_super) {
    __extends(ViesServerError, _super);
    function ViesServerError(message, soapResponse) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        _this.soapResponse = soapResponse;
        return _this;
    }
    return ViesServerError;
}(Error));
exports.ViesServerError = ViesServerError;
var ViesClientError = /** @class */ (function (_super) {
    __extends(ViesClientError, _super);
    function ViesClientError(message, soapResponse) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        Object.setPrototypeOf(_this, ViesClientError.prototype);
        _this.soapResponse = soapResponse;
        return _this;
    }
    return ViesClientError;
}(Error));
exports.ViesClientError = ViesClientError;
exports.VAT_SERVICE_URL = "https://ec.europa.eu/taxation_customs/vies/services/checkVatService";
exports.VAT_TEST_SERVICE_URL = "https://ec.europa.eu/taxation_customs/vies/services/checkVatTestService";
var soapBodyTemplate = '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"\n  xmlns:tns1="urn:ec.europa.eu:taxud:vies:services:checkVat:types"\n  xmlns:impl="urn:ec.europa.eu:taxud:vies:services:checkVat">\n  <soap:Header>\n  </soap:Header>\n  <soap:Body>\n    <tns1:checkVat xmlns:tns1="urn:ec.europa.eu:taxud:vies:services:checkVat:types"\n     xmlns="urn:ec.europa.eu:taxud:vies:services:checkVat:types">\n     <tns1:countryCode>_country_code_placeholder_</tns1:countryCode>\n     <tns1:vatNumber>_vat_number_placeholder_</tns1:vatNumber>\n    </tns1:checkVat>\n  </soap:Body>\n</soap:Envelope>';
var CountryCodes;
(function (CountryCodes) {
    CountryCodes["Austria"] = "AT";
    CountryCodes["Belgium"] = "BE";
    CountryCodes["Bulgaria"] = "BG";
    CountryCodes["Croatia"] = "HR";
    CountryCodes["Cyprus"] = "CY";
    CountryCodes["CzechRepublic"] = "CZ";
    CountryCodes["Denmark"] = "DK";
    CountryCodes["Estonia"] = "EE";
    CountryCodes["Finland"] = "FI";
    CountryCodes["France"] = "FR";
    CountryCodes["Germany"] = "DE";
    CountryCodes["Greece"] = "EL";
    CountryCodes["Hungary"] = "HU";
    CountryCodes["Ireland"] = "IE";
    CountryCodes["Italy"] = "IT";
    CountryCodes["Latvia"] = "LV";
    CountryCodes["Lithuania"] = "LT";
    CountryCodes["Luxembourg"] = "LU";
    CountryCodes["Malta"] = "MT";
    CountryCodes["Netherlands"] = "NL";
    CountryCodes["Poland"] = "PL";
    CountryCodes["Portugal"] = "PT";
    CountryCodes["Romania"] = "RO";
    CountryCodes["Slovakia"] = "SK";
    CountryCodes["Slovenia"] = "SI";
    CountryCodes["Spain"] = "ES";
    CountryCodes["Sweden"] = "SE";
    CountryCodes["UnitedKingdom"] = "GB";
})(CountryCodes = exports.CountryCodes || (exports.CountryCodes = {}));
var getReadableErrorMsg = function (faultstring) {
    switch (faultstring) {
        case "INVALID_INPUT":
            return "The provided CountryCode is invalid or the VAT number is empty";
        case "SERVICE_UNAVAILABLE":
            return "The VIES VAT service is unavailable, please try again later";
        case "MS_UNAVAILABLE":
            return "The VAT database of the requested member country is unavailable, please try again later";
        case "MS_MAX_CONCURRENT_REQ":
            return "The VAT database of the requested member country has had too many requests, please try again later";
        case "TIMEOUT":
            return "The request to VAT database of the requested member country has timed out, please try again later";
        case "SERVER_BUSY":
            return "The service cannot process your request, please try again later";
        case "INVALID_REQUESTER_INFO":
            return "The requester info is invalid";
        default:
            return "Unknown error";
    }
};
var parseField = function (soapMessage, fieldName) {
    var regex = new RegExp("<" + fieldName + ">((.|\\s)*?)</" + fieldName + ">", "gm");
    var match = regex.exec(soapMessage);
    return match ? match[1] : undefined;
};
var hasFault = function (soapMessage) {
    return soapMessage.match(/<soap:Fault>\S+<\/soap:Fault>/g) !== null;
};
var parseSoapResponse = function (soapMessage) {
    var _a;
    if (hasFault(soapMessage)) {
        var faultString = parseField(soapMessage, "faultstring");
        throw new ViesServerError(faultString, soapMessage);
    }
    else {
        var countryCode = parseField(soapMessage, "countryCode");
        var vatNumber = parseField(soapMessage, "vatNumber");
        var requestDate = parseField(soapMessage, "requestDate");
        var valid = parseField(soapMessage, "valid");
        if (!countryCode || !vatNumber || !requestDate || !valid) {
            throw new ViesClientError("Failed to parse vat validation info from VIES response", soapMessage);
        }
        return {
            countryCode: countryCode,
            vatNumber: vatNumber,
            requestDate: requestDate,
            valid: valid === "true",
            name: parseField(soapMessage, "name"),
            address: (_a = parseField(soapMessage, "address")) === null || _a === void 0 ? void 0 : _a.replace(/\n/g, ", ")
        };
    }
};
var headers = {
    "Content-Type": "application/x-www-form-urlencoded",
    "User-Agent": "node-soap",
    Accept: "text/html,application/xhtml+xml,application/xml,text/xml;q=0.9,*/*;q=0.8",
    "Accept-Encoding": "none",
    "Accept-Charset": "utf-8",
    Connection: "close",
    Host: "ec.europa.eu",
    SOAPAction: "urn:ec.europa.eu:taxud:vies:services:checkVat/checkVat"
};
var validateVat = function (countryCode, vatNumber, serviceUrl) {
    if (serviceUrl === void 0) { serviceUrl = exports.VAT_SERVICE_URL; }
    return __awaiter(void 0, void 0, void 0, function () {
        var xml, response, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    xml = soapBodyTemplate
                        .replace("_country_code_placeholder_", countryCode)
                        .replace("_vat_number_placeholder_", vatNumber)
                        .replace("\n", "")
                        .trim();
                    return [4 /*yield*/, fetch(serviceUrl, {
                            headers: headers,
                            method: "POST",
                            mode: "cors",
                            cache: "no-cache",
                            credentials: "same-origin",
                            body: xml // body data type must match "Content-Type" header
                        })];
                case 1:
                    response = _b.sent();
                    _a = parseSoapResponse;
                    return [4 /*yield*/, response.text()];
                case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
            }
        });
    });
};
exports.default = validateVat;
//# sourceMappingURL=index.js.map